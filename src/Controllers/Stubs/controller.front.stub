<?php

namespace DummyNamespace;

use DummyParentControllerPath;
use DummyPathService\Services\ModelName\Front\DummyService;
use DummyPathRequest\Requests\ModelName\Front\DummyRemovePostRequest;
use DummyPathRequest\Requests\ModelName\Front\DummyStorePostRequest;
use DummyPathRequest\Requests\ModelName\Front\DummyStatePostRequest;
use DummyPathRequest\Requests\ModelName\Front\DummySearchPostRequest;
use DummyPathRequest\Requests\ModelName\Front\DummyOrderingPostRequest;
use DummyPathRequest\Requests\ModelName\Front\DummyCheckoutPostRequest;

class DummyClass extends DummyParentController
{
    public function __construct(DummyService $service)
    {
        parent::__construct($service);
        $this->service = $service;
    }


    public function getItem(DummyGetItemRequest $request)
    {
        try {
            $this->service->getItem(collect(['alias' => $request->get('alias')]));
        } catch (Throwable $t) {
            $this->handleException($t);
        }

        return $this->response($this->service->status, $this->service->response);
    }


    public function ordering(DummyOrderingPostRequest $request)
    {
        try {
            $this->service->ordering($request->validated());
        } catch (Throwable $t) {
            $this->handleException($t);
        }

        return $this->response($this->service->status, $this->service->response);
    }


    public function remove(DummyRemovePostRequest $request)
    {
        try {
            $this->service->remove($request->validated());
        } catch (Throwable $t) {
            $this->handleException($t);
        }

        return $this->response($this->service->status, $this->service->response);
    }


    public function restore(DummyRestorePostRequest $request)
    {
        try {
            $this->service->checkout($request->validated());
        } catch (Throwable $t) {
            $this->handleException($t);
        }

        return $this->response($this->service->status, $this->service->response);
    }


    public function search(DummySearchPostRequest $request)
    {
        try {
             $this->service->search($request->validated());
        } catch (Throwable $t) {
            $this->handleException($t);
        }

        return $this->response($this->service->status, $this->service->response);
    }


    public function state(DummyStatePostRequest $request)
    {
        try {
            $this->service->state($request->validated());
        } catch (Throwable $t) {
            $this->handleException($t);
        }

        return $this->response($this->service->status, $this->service->response);
    }


    public function store(DummyStorePostRequest $request)
    {
        try {
            $this->service->store($request->validated());
        } catch (Throwable $t) {
            $this->handleException($t);
        }

        return $this->response($this->service->status, $this->service->response);
    }
}
